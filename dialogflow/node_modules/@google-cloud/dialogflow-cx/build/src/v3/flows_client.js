"use strict";
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlowsClient = void 0;
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v3/flows_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./flows_client_config.json");
const version = require('../../../package.json').version;
/**
 *  Service for managing {@link google.cloud.dialogflow.cx.v3.Flow|Flows}.
 * @class
 * @memberof v3
 */
class FlowsClient {
    /**
     * Construct an instance of FlowsClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
     *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new FlowsClient({fallback: 'rest'}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // Request numeric enum values if REST transport is used.
        opts.numericEnums = true;
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = staticMembers.servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        this.locationsClient = new this._gaxModule.LocationsClient(this._gaxGrpc, opts);
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else if (opts.fallback === 'rest') {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            agentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}'),
            agentValidationResultPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/validationResult'),
            changelogPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/changelogs/{changelog}'),
            continuousTestResultPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/environments/{environment}/continuousTestResults/{continuous_test_result}'),
            deploymentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/environments/{environment}/deployments/{deployment}'),
            entityTypePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/entityTypes/{entity_type}'),
            environmentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/environments/{environment}'),
            experimentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/environments/{environment}/experiments/{experiment}'),
            flowPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/flows/{flow}'),
            flowValidationResultPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/flows/{flow}/validationResult'),
            intentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/intents/{intent}'),
            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),
            pagePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/flows/{flow}/pages/{page}'),
            projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),
            projectLocationAgentEnvironmentSessionEntityTypePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/environments/{environment}/sessions/{session}/entityTypes/{entity_type}'),
            projectLocationAgentSessionEntityTypePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/sessions/{session}/entityTypes/{entity_type}'),
            securitySettingsPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/securitySettings/{security_settings}'),
            testCasePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/testCases/{test_case}'),
            testCaseResultPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/testCases/{test_case}/results/{result}'),
            transitionRouteGroupPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/flows/{flow}/transitionRouteGroups/{transition_route_group}'),
            versionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/flows/{flow}/versions/{version}'),
            webhookPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agents/{agent}/webhooks/{webhook}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listFlows: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'flows'),
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        const lroOptions = {
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
        };
        if (opts.fallback === 'rest') {
            lroOptions.protoJson = protoFilesRoot;
            lroOptions.httpRules = [
                {
                    selector: 'google.cloud.location.Locations.GetLocation',
                    get: '/v3/{name=projects/*/locations/*}',
                },
                {
                    selector: 'google.cloud.location.Locations.ListLocations',
                    get: '/v3/{name=projects/*}/locations',
                },
                {
                    selector: 'google.longrunning.Operations.CancelOperation',
                    post: '/v3/{name=projects/*/operations/*}:cancel',
                    additional_bindings: [
                        { post: '/v3/{name=projects/*/locations/*/operations/*}:cancel' },
                    ],
                },
                {
                    selector: 'google.longrunning.Operations.GetOperation',
                    get: '/v3/{name=projects/*/operations/*}',
                    additional_bindings: [
                        { get: '/v3/{name=projects/*/locations/*/operations/*}' },
                    ],
                },
                {
                    selector: 'google.longrunning.Operations.ListOperations',
                    get: '/v3/{name=projects/*}/operations',
                    additional_bindings: [
                        { get: '/v3/{name=projects/*/locations/*}/operations' },
                    ],
                },
            ];
        }
        this.operationsClient = this._gaxModule
            .lro(lroOptions)
            .operationsClient(opts);
        const trainFlowResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const trainFlowMetadata = protoFilesRoot.lookup('.google.protobuf.Struct');
        const importFlowResponse = protoFilesRoot.lookup('.google.cloud.dialogflow.cx.v3.ImportFlowResponse');
        const importFlowMetadata = protoFilesRoot.lookup('.google.protobuf.Struct');
        const exportFlowResponse = protoFilesRoot.lookup('.google.cloud.dialogflow.cx.v3.ExportFlowResponse');
        const exportFlowMetadata = protoFilesRoot.lookup('.google.protobuf.Struct');
        this.descriptors.longrunning = {
            trainFlow: new this._gaxModule.LongrunningDescriptor(this.operationsClient, trainFlowResponse.decode.bind(trainFlowResponse), trainFlowMetadata.decode.bind(trainFlowMetadata)),
            importFlow: new this._gaxModule.LongrunningDescriptor(this.operationsClient, importFlowResponse.decode.bind(importFlowResponse), importFlowMetadata.decode.bind(importFlowMetadata)),
            exportFlow: new this._gaxModule.LongrunningDescriptor(this.operationsClient, exportFlowResponse.decode.bind(exportFlowResponse), exportFlowMetadata.decode.bind(exportFlowMetadata)),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.dialogflow.cx.v3.Flows', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.flowsStub) {
            return this.flowsStub;
        }
        // Put together the "service stub" for
        // google.cloud.dialogflow.cx.v3.Flows.
        this.flowsStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.cloud.dialogflow.cx.v3.Flows')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.cloud.dialogflow.cx.v3.Flows, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const flowsStubMethods = [
            'createFlow',
            'deleteFlow',
            'listFlows',
            'getFlow',
            'updateFlow',
            'trainFlow',
            'validateFlow',
            'getFlowValidationResult',
            'importFlow',
            'exportFlow',
        ];
        for (const methodName of flowsStubMethods) {
            const callPromise = this.flowsStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] ||
                this.descriptors.longrunning[methodName] ||
                undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.flowsStub;
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        return 'dialogflow.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        return 'dialogflow.googleapis.com';
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return [
            'https://www.googleapis.com/auth/cloud-platform',
            'https://www.googleapis.com/auth/dialogflow',
        ];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    createFlow(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createFlow(request, options, callback);
    }
    deleteFlow(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteFlow(request, options, callback);
    }
    getFlow(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getFlow(request, options, callback);
    }
    updateFlow(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'flow.name': (_a = request.flow.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateFlow(request, options, callback);
    }
    validateFlow(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.validateFlow(request, options, callback);
    }
    getFlowValidationResult(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getFlowValidationResult(request, options, callback);
    }
    trainFlow(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.trainFlow(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `trainFlow()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/flows.train_flow.js</caption>
     * region_tag:dialogflow_v3_generated_Flows_TrainFlow_async
     */
    async checkTrainFlowProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.trainFlow, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    importFlow(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.importFlow(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `importFlow()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/flows.import_flow.js</caption>
     * region_tag:dialogflow_v3_generated_Flows_ImportFlow_async
     */
    async checkImportFlowProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.importFlow, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    exportFlow(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.exportFlow(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `exportFlow()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/flows.export_flow.js</caption>
     * region_tag:dialogflow_v3_generated_Flows_ExportFlow_async
     */
    async checkExportFlowProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.exportFlow, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    listFlows(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listFlows(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The agent containing the flows.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
     * @param {number} request.pageSize
     *   The maximum number of items to return in a single page. By default 100 and
     *   at most 1000.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request.
     * @param {string} request.languageCode
     *   The language to list flows for. The following fields are language
     *   dependent:
     *
     *   *  `Flow.event_handlers.trigger_fulfillment.messages`
     *   *  `Flow.event_handlers.trigger_fulfillment.conditional_cases`
     *   *  `Flow.transition_routes.trigger_fulfillment.messages`
     *   *  `Flow.transition_routes.trigger_fulfillment.conditional_cases`
     *
     *   If not specified, the agent's default language is used.
     *   [Many
     *   languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
     *   are supported.
     *   Note: languages must be enabled in the agent before they can be used.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link google.cloud.dialogflow.cx.v3.Flow | Flow} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listFlowsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listFlowsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listFlows'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listFlows.createStream(this.innerApiCalls.listFlows, request, callSettings);
    }
    /**
     * Equivalent to `listFlows`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The agent containing the flows.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
     * @param {number} request.pageSize
     *   The maximum number of items to return in a single page. By default 100 and
     *   at most 1000.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request.
     * @param {string} request.languageCode
     *   The language to list flows for. The following fields are language
     *   dependent:
     *
     *   *  `Flow.event_handlers.trigger_fulfillment.messages`
     *   *  `Flow.event_handlers.trigger_fulfillment.conditional_cases`
     *   *  `Flow.transition_routes.trigger_fulfillment.messages`
     *   *  `Flow.transition_routes.trigger_fulfillment.conditional_cases`
     *
     *   If not specified, the agent's default language is used.
     *   [Many
     *   languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
     *   are supported.
     *   Note: languages must be enabled in the agent before they can be used.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.dialogflow.cx.v3.Flow | Flow}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/flows.list_flows.js</caption>
     * region_tag:dialogflow_v3_generated_Flows_ListFlows_async
     */
    listFlowsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listFlows'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listFlows.asyncIterate(this.innerApiCalls['listFlows'], request, callSettings);
    }
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request, options, callback) {
        return this.locationsClient.getLocation(request, options, callback);
    }
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request, options) {
        return this.locationsClient.listLocationsAsync(request, options);
    }
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request, options, callback) {
        return this.operationsClient.getOperation(request, options, callback);
    }
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request, options) {
        return this.operationsClient.listOperationsAsync(request, options);
    }
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request, options, callback) {
        return this.operationsClient.cancelOperation(request, options, callback);
    }
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request, options, callback) {
        return this.operationsClient.deleteOperation(request, options, callback);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified agent resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @returns {string} Resource name string.
     */
    agentPath(project, location, agent) {
        return this.pathTemplates.agentPathTemplate.render({
            project: project,
            location: location,
            agent: agent,
        });
    }
    /**
     * Parse the project from Agent resource.
     *
     * @param {string} agentName
     *   A fully-qualified path representing Agent resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAgentName(agentName) {
        return this.pathTemplates.agentPathTemplate.match(agentName).project;
    }
    /**
     * Parse the location from Agent resource.
     *
     * @param {string} agentName
     *   A fully-qualified path representing Agent resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromAgentName(agentName) {
        return this.pathTemplates.agentPathTemplate.match(agentName).location;
    }
    /**
     * Parse the agent from Agent resource.
     *
     * @param {string} agentName
     *   A fully-qualified path representing Agent resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromAgentName(agentName) {
        return this.pathTemplates.agentPathTemplate.match(agentName).agent;
    }
    /**
     * Return a fully-qualified agentValidationResult resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @returns {string} Resource name string.
     */
    agentValidationResultPath(project, location, agent) {
        return this.pathTemplates.agentValidationResultPathTemplate.render({
            project: project,
            location: location,
            agent: agent,
        });
    }
    /**
     * Parse the project from AgentValidationResult resource.
     *
     * @param {string} agentValidationResultName
     *   A fully-qualified path representing AgentValidationResult resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAgentValidationResultName(agentValidationResultName) {
        return this.pathTemplates.agentValidationResultPathTemplate.match(agentValidationResultName).project;
    }
    /**
     * Parse the location from AgentValidationResult resource.
     *
     * @param {string} agentValidationResultName
     *   A fully-qualified path representing AgentValidationResult resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromAgentValidationResultName(agentValidationResultName) {
        return this.pathTemplates.agentValidationResultPathTemplate.match(agentValidationResultName).location;
    }
    /**
     * Parse the agent from AgentValidationResult resource.
     *
     * @param {string} agentValidationResultName
     *   A fully-qualified path representing AgentValidationResult resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromAgentValidationResultName(agentValidationResultName) {
        return this.pathTemplates.agentValidationResultPathTemplate.match(agentValidationResultName).agent;
    }
    /**
     * Return a fully-qualified changelog resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} changelog
     * @returns {string} Resource name string.
     */
    changelogPath(project, location, agent, changelog) {
        return this.pathTemplates.changelogPathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            changelog: changelog,
        });
    }
    /**
     * Parse the project from Changelog resource.
     *
     * @param {string} changelogName
     *   A fully-qualified path representing Changelog resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromChangelogName(changelogName) {
        return this.pathTemplates.changelogPathTemplate.match(changelogName)
            .project;
    }
    /**
     * Parse the location from Changelog resource.
     *
     * @param {string} changelogName
     *   A fully-qualified path representing Changelog resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromChangelogName(changelogName) {
        return this.pathTemplates.changelogPathTemplate.match(changelogName)
            .location;
    }
    /**
     * Parse the agent from Changelog resource.
     *
     * @param {string} changelogName
     *   A fully-qualified path representing Changelog resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromChangelogName(changelogName) {
        return this.pathTemplates.changelogPathTemplate.match(changelogName).agent;
    }
    /**
     * Parse the changelog from Changelog resource.
     *
     * @param {string} changelogName
     *   A fully-qualified path representing Changelog resource.
     * @returns {string} A string representing the changelog.
     */
    matchChangelogFromChangelogName(changelogName) {
        return this.pathTemplates.changelogPathTemplate.match(changelogName)
            .changelog;
    }
    /**
     * Return a fully-qualified continuousTestResult resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} environment
     * @param {string} continuous_test_result
     * @returns {string} Resource name string.
     */
    continuousTestResultPath(project, location, agent, environment, continuousTestResult) {
        return this.pathTemplates.continuousTestResultPathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            environment: environment,
            continuous_test_result: continuousTestResult,
        });
    }
    /**
     * Parse the project from ContinuousTestResult resource.
     *
     * @param {string} continuousTestResultName
     *   A fully-qualified path representing ContinuousTestResult resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromContinuousTestResultName(continuousTestResultName) {
        return this.pathTemplates.continuousTestResultPathTemplate.match(continuousTestResultName).project;
    }
    /**
     * Parse the location from ContinuousTestResult resource.
     *
     * @param {string} continuousTestResultName
     *   A fully-qualified path representing ContinuousTestResult resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromContinuousTestResultName(continuousTestResultName) {
        return this.pathTemplates.continuousTestResultPathTemplate.match(continuousTestResultName).location;
    }
    /**
     * Parse the agent from ContinuousTestResult resource.
     *
     * @param {string} continuousTestResultName
     *   A fully-qualified path representing ContinuousTestResult resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromContinuousTestResultName(continuousTestResultName) {
        return this.pathTemplates.continuousTestResultPathTemplate.match(continuousTestResultName).agent;
    }
    /**
     * Parse the environment from ContinuousTestResult resource.
     *
     * @param {string} continuousTestResultName
     *   A fully-qualified path representing ContinuousTestResult resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromContinuousTestResultName(continuousTestResultName) {
        return this.pathTemplates.continuousTestResultPathTemplate.match(continuousTestResultName).environment;
    }
    /**
     * Parse the continuous_test_result from ContinuousTestResult resource.
     *
     * @param {string} continuousTestResultName
     *   A fully-qualified path representing ContinuousTestResult resource.
     * @returns {string} A string representing the continuous_test_result.
     */
    matchContinuousTestResultFromContinuousTestResultName(continuousTestResultName) {
        return this.pathTemplates.continuousTestResultPathTemplate.match(continuousTestResultName).continuous_test_result;
    }
    /**
     * Return a fully-qualified deployment resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} environment
     * @param {string} deployment
     * @returns {string} Resource name string.
     */
    deploymentPath(project, location, agent, environment, deployment) {
        return this.pathTemplates.deploymentPathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            environment: environment,
            deployment: deployment,
        });
    }
    /**
     * Parse the project from Deployment resource.
     *
     * @param {string} deploymentName
     *   A fully-qualified path representing Deployment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDeploymentName(deploymentName) {
        return this.pathTemplates.deploymentPathTemplate.match(deploymentName)
            .project;
    }
    /**
     * Parse the location from Deployment resource.
     *
     * @param {string} deploymentName
     *   A fully-qualified path representing Deployment resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDeploymentName(deploymentName) {
        return this.pathTemplates.deploymentPathTemplate.match(deploymentName)
            .location;
    }
    /**
     * Parse the agent from Deployment resource.
     *
     * @param {string} deploymentName
     *   A fully-qualified path representing Deployment resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromDeploymentName(deploymentName) {
        return this.pathTemplates.deploymentPathTemplate.match(deploymentName)
            .agent;
    }
    /**
     * Parse the environment from Deployment resource.
     *
     * @param {string} deploymentName
     *   A fully-qualified path representing Deployment resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromDeploymentName(deploymentName) {
        return this.pathTemplates.deploymentPathTemplate.match(deploymentName)
            .environment;
    }
    /**
     * Parse the deployment from Deployment resource.
     *
     * @param {string} deploymentName
     *   A fully-qualified path representing Deployment resource.
     * @returns {string} A string representing the deployment.
     */
    matchDeploymentFromDeploymentName(deploymentName) {
        return this.pathTemplates.deploymentPathTemplate.match(deploymentName)
            .deployment;
    }
    /**
     * Return a fully-qualified entityType resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} entity_type
     * @returns {string} Resource name string.
     */
    entityTypePath(project, location, agent, entityType) {
        return this.pathTemplates.entityTypePathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            entity_type: entityType,
        });
    }
    /**
     * Parse the project from EntityType resource.
     *
     * @param {string} entityTypeName
     *   A fully-qualified path representing EntityType resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEntityTypeName(entityTypeName) {
        return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
            .project;
    }
    /**
     * Parse the location from EntityType resource.
     *
     * @param {string} entityTypeName
     *   A fully-qualified path representing EntityType resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEntityTypeName(entityTypeName) {
        return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
            .location;
    }
    /**
     * Parse the agent from EntityType resource.
     *
     * @param {string} entityTypeName
     *   A fully-qualified path representing EntityType resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromEntityTypeName(entityTypeName) {
        return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
            .agent;
    }
    /**
     * Parse the entity_type from EntityType resource.
     *
     * @param {string} entityTypeName
     *   A fully-qualified path representing EntityType resource.
     * @returns {string} A string representing the entity_type.
     */
    matchEntityTypeFromEntityTypeName(entityTypeName) {
        return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
            .entity_type;
    }
    /**
     * Return a fully-qualified environment resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} environment
     * @returns {string} Resource name string.
     */
    environmentPath(project, location, agent, environment) {
        return this.pathTemplates.environmentPathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            environment: environment,
        });
    }
    /**
     * Parse the project from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEnvironmentName(environmentName) {
        return this.pathTemplates.environmentPathTemplate.match(environmentName)
            .project;
    }
    /**
     * Parse the location from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEnvironmentName(environmentName) {
        return this.pathTemplates.environmentPathTemplate.match(environmentName)
            .location;
    }
    /**
     * Parse the agent from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromEnvironmentName(environmentName) {
        return this.pathTemplates.environmentPathTemplate.match(environmentName)
            .agent;
    }
    /**
     * Parse the environment from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromEnvironmentName(environmentName) {
        return this.pathTemplates.environmentPathTemplate.match(environmentName)
            .environment;
    }
    /**
     * Return a fully-qualified experiment resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} environment
     * @param {string} experiment
     * @returns {string} Resource name string.
     */
    experimentPath(project, location, agent, environment, experiment) {
        return this.pathTemplates.experimentPathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            environment: environment,
            experiment: experiment,
        });
    }
    /**
     * Parse the project from Experiment resource.
     *
     * @param {string} experimentName
     *   A fully-qualified path representing Experiment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromExperimentName(experimentName) {
        return this.pathTemplates.experimentPathTemplate.match(experimentName)
            .project;
    }
    /**
     * Parse the location from Experiment resource.
     *
     * @param {string} experimentName
     *   A fully-qualified path representing Experiment resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromExperimentName(experimentName) {
        return this.pathTemplates.experimentPathTemplate.match(experimentName)
            .location;
    }
    /**
     * Parse the agent from Experiment resource.
     *
     * @param {string} experimentName
     *   A fully-qualified path representing Experiment resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromExperimentName(experimentName) {
        return this.pathTemplates.experimentPathTemplate.match(experimentName)
            .agent;
    }
    /**
     * Parse the environment from Experiment resource.
     *
     * @param {string} experimentName
     *   A fully-qualified path representing Experiment resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromExperimentName(experimentName) {
        return this.pathTemplates.experimentPathTemplate.match(experimentName)
            .environment;
    }
    /**
     * Parse the experiment from Experiment resource.
     *
     * @param {string} experimentName
     *   A fully-qualified path representing Experiment resource.
     * @returns {string} A string representing the experiment.
     */
    matchExperimentFromExperimentName(experimentName) {
        return this.pathTemplates.experimentPathTemplate.match(experimentName)
            .experiment;
    }
    /**
     * Return a fully-qualified flow resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} flow
     * @returns {string} Resource name string.
     */
    flowPath(project, location, agent, flow) {
        return this.pathTemplates.flowPathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            flow: flow,
        });
    }
    /**
     * Parse the project from Flow resource.
     *
     * @param {string} flowName
     *   A fully-qualified path representing Flow resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromFlowName(flowName) {
        return this.pathTemplates.flowPathTemplate.match(flowName).project;
    }
    /**
     * Parse the location from Flow resource.
     *
     * @param {string} flowName
     *   A fully-qualified path representing Flow resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromFlowName(flowName) {
        return this.pathTemplates.flowPathTemplate.match(flowName).location;
    }
    /**
     * Parse the agent from Flow resource.
     *
     * @param {string} flowName
     *   A fully-qualified path representing Flow resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromFlowName(flowName) {
        return this.pathTemplates.flowPathTemplate.match(flowName).agent;
    }
    /**
     * Parse the flow from Flow resource.
     *
     * @param {string} flowName
     *   A fully-qualified path representing Flow resource.
     * @returns {string} A string representing the flow.
     */
    matchFlowFromFlowName(flowName) {
        return this.pathTemplates.flowPathTemplate.match(flowName).flow;
    }
    /**
     * Return a fully-qualified flowValidationResult resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} flow
     * @returns {string} Resource name string.
     */
    flowValidationResultPath(project, location, agent, flow) {
        return this.pathTemplates.flowValidationResultPathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            flow: flow,
        });
    }
    /**
     * Parse the project from FlowValidationResult resource.
     *
     * @param {string} flowValidationResultName
     *   A fully-qualified path representing FlowValidationResult resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromFlowValidationResultName(flowValidationResultName) {
        return this.pathTemplates.flowValidationResultPathTemplate.match(flowValidationResultName).project;
    }
    /**
     * Parse the location from FlowValidationResult resource.
     *
     * @param {string} flowValidationResultName
     *   A fully-qualified path representing FlowValidationResult resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromFlowValidationResultName(flowValidationResultName) {
        return this.pathTemplates.flowValidationResultPathTemplate.match(flowValidationResultName).location;
    }
    /**
     * Parse the agent from FlowValidationResult resource.
     *
     * @param {string} flowValidationResultName
     *   A fully-qualified path representing FlowValidationResult resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromFlowValidationResultName(flowValidationResultName) {
        return this.pathTemplates.flowValidationResultPathTemplate.match(flowValidationResultName).agent;
    }
    /**
     * Parse the flow from FlowValidationResult resource.
     *
     * @param {string} flowValidationResultName
     *   A fully-qualified path representing FlowValidationResult resource.
     * @returns {string} A string representing the flow.
     */
    matchFlowFromFlowValidationResultName(flowValidationResultName) {
        return this.pathTemplates.flowValidationResultPathTemplate.match(flowValidationResultName).flow;
    }
    /**
     * Return a fully-qualified intent resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} intent
     * @returns {string} Resource name string.
     */
    intentPath(project, location, agent, intent) {
        return this.pathTemplates.intentPathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            intent: intent,
        });
    }
    /**
     * Parse the project from Intent resource.
     *
     * @param {string} intentName
     *   A fully-qualified path representing Intent resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromIntentName(intentName) {
        return this.pathTemplates.intentPathTemplate.match(intentName).project;
    }
    /**
     * Parse the location from Intent resource.
     *
     * @param {string} intentName
     *   A fully-qualified path representing Intent resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromIntentName(intentName) {
        return this.pathTemplates.intentPathTemplate.match(intentName).location;
    }
    /**
     * Parse the agent from Intent resource.
     *
     * @param {string} intentName
     *   A fully-qualified path representing Intent resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromIntentName(intentName) {
        return this.pathTemplates.intentPathTemplate.match(intentName).agent;
    }
    /**
     * Parse the intent from Intent resource.
     *
     * @param {string} intentName
     *   A fully-qualified path representing Intent resource.
     * @returns {string} A string representing the intent.
     */
    matchIntentFromIntentName(intentName) {
        return this.pathTemplates.intentPathTemplate.match(intentName).intent;
    }
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project, location) {
        return this.pathTemplates.locationPathTemplate.render({
            project: project,
            location: location,
        });
    }
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).project;
    }
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).location;
    }
    /**
     * Return a fully-qualified page resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} flow
     * @param {string} page
     * @returns {string} Resource name string.
     */
    pagePath(project, location, agent, flow, page) {
        return this.pathTemplates.pagePathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            flow: flow,
            page: page,
        });
    }
    /**
     * Parse the project from Page resource.
     *
     * @param {string} pageName
     *   A fully-qualified path representing Page resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromPageName(pageName) {
        return this.pathTemplates.pagePathTemplate.match(pageName).project;
    }
    /**
     * Parse the location from Page resource.
     *
     * @param {string} pageName
     *   A fully-qualified path representing Page resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromPageName(pageName) {
        return this.pathTemplates.pagePathTemplate.match(pageName).location;
    }
    /**
     * Parse the agent from Page resource.
     *
     * @param {string} pageName
     *   A fully-qualified path representing Page resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromPageName(pageName) {
        return this.pathTemplates.pagePathTemplate.match(pageName).agent;
    }
    /**
     * Parse the flow from Page resource.
     *
     * @param {string} pageName
     *   A fully-qualified path representing Page resource.
     * @returns {string} A string representing the flow.
     */
    matchFlowFromPageName(pageName) {
        return this.pathTemplates.pagePathTemplate.match(pageName).flow;
    }
    /**
     * Parse the page from Page resource.
     *
     * @param {string} pageName
     *   A fully-qualified path representing Page resource.
     * @returns {string} A string representing the page.
     */
    matchPageFromPageName(pageName) {
        return this.pathTemplates.pagePathTemplate.match(pageName).page;
    }
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project) {
        return this.pathTemplates.projectPathTemplate.render({
            project: project,
        });
    }
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName) {
        return this.pathTemplates.projectPathTemplate.match(projectName).project;
    }
    /**
     * Return a fully-qualified projectLocationAgentEnvironmentSessionEntityType resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} environment
     * @param {string} session
     * @param {string} entity_type
     * @returns {string} Resource name string.
     */
    projectLocationAgentEnvironmentSessionEntityTypePath(project, location, agent, environment, session, entityType) {
        return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            environment: environment,
            session: session,
            entity_type: entityType,
        });
    }
    /**
     * Parse the project from ProjectLocationAgentEnvironmentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationAgentEnvironmentSessionEntityTypeName(projectLocationAgentEnvironmentSessionEntityTypeName) {
        return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.match(projectLocationAgentEnvironmentSessionEntityTypeName).project;
    }
    /**
     * Parse the location from ProjectLocationAgentEnvironmentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationAgentEnvironmentSessionEntityTypeName(projectLocationAgentEnvironmentSessionEntityTypeName) {
        return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.match(projectLocationAgentEnvironmentSessionEntityTypeName).location;
    }
    /**
     * Parse the agent from ProjectLocationAgentEnvironmentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromProjectLocationAgentEnvironmentSessionEntityTypeName(projectLocationAgentEnvironmentSessionEntityTypeName) {
        return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.match(projectLocationAgentEnvironmentSessionEntityTypeName).agent;
    }
    /**
     * Parse the environment from ProjectLocationAgentEnvironmentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromProjectLocationAgentEnvironmentSessionEntityTypeName(projectLocationAgentEnvironmentSessionEntityTypeName) {
        return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.match(projectLocationAgentEnvironmentSessionEntityTypeName).environment;
    }
    /**
     * Parse the session from ProjectLocationAgentEnvironmentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromProjectLocationAgentEnvironmentSessionEntityTypeName(projectLocationAgentEnvironmentSessionEntityTypeName) {
        return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.match(projectLocationAgentEnvironmentSessionEntityTypeName).session;
    }
    /**
     * Parse the entity_type from ProjectLocationAgentEnvironmentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
     * @returns {string} A string representing the entity_type.
     */
    matchEntityTypeFromProjectLocationAgentEnvironmentSessionEntityTypeName(projectLocationAgentEnvironmentSessionEntityTypeName) {
        return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.match(projectLocationAgentEnvironmentSessionEntityTypeName).entity_type;
    }
    /**
     * Return a fully-qualified projectLocationAgentSessionEntityType resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} session
     * @param {string} entity_type
     * @returns {string} Resource name string.
     */
    projectLocationAgentSessionEntityTypePath(project, location, agent, session, entityType) {
        return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            session: session,
            entity_type: entityType,
        });
    }
    /**
     * Parse the project from ProjectLocationAgentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_session_entity_type resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName) {
        return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(projectLocationAgentSessionEntityTypeName).project;
    }
    /**
     * Parse the location from ProjectLocationAgentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_session_entity_type resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName) {
        return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(projectLocationAgentSessionEntityTypeName).location;
    }
    /**
     * Parse the agent from ProjectLocationAgentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_session_entity_type resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName) {
        return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(projectLocationAgentSessionEntityTypeName).agent;
    }
    /**
     * Parse the session from ProjectLocationAgentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_session_entity_type resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName) {
        return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(projectLocationAgentSessionEntityTypeName).session;
    }
    /**
     * Parse the entity_type from ProjectLocationAgentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_session_entity_type resource.
     * @returns {string} A string representing the entity_type.
     */
    matchEntityTypeFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName) {
        return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(projectLocationAgentSessionEntityTypeName).entity_type;
    }
    /**
     * Return a fully-qualified securitySettings resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} security_settings
     * @returns {string} Resource name string.
     */
    securitySettingsPath(project, location, securitySettings) {
        return this.pathTemplates.securitySettingsPathTemplate.render({
            project: project,
            location: location,
            security_settings: securitySettings,
        });
    }
    /**
     * Parse the project from SecuritySettings resource.
     *
     * @param {string} securitySettingsName
     *   A fully-qualified path representing SecuritySettings resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromSecuritySettingsName(securitySettingsName) {
        return this.pathTemplates.securitySettingsPathTemplate.match(securitySettingsName).project;
    }
    /**
     * Parse the location from SecuritySettings resource.
     *
     * @param {string} securitySettingsName
     *   A fully-qualified path representing SecuritySettings resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromSecuritySettingsName(securitySettingsName) {
        return this.pathTemplates.securitySettingsPathTemplate.match(securitySettingsName).location;
    }
    /**
     * Parse the security_settings from SecuritySettings resource.
     *
     * @param {string} securitySettingsName
     *   A fully-qualified path representing SecuritySettings resource.
     * @returns {string} A string representing the security_settings.
     */
    matchSecuritySettingsFromSecuritySettingsName(securitySettingsName) {
        return this.pathTemplates.securitySettingsPathTemplate.match(securitySettingsName).security_settings;
    }
    /**
     * Return a fully-qualified testCase resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} test_case
     * @returns {string} Resource name string.
     */
    testCasePath(project, location, agent, testCase) {
        return this.pathTemplates.testCasePathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            test_case: testCase,
        });
    }
    /**
     * Parse the project from TestCase resource.
     *
     * @param {string} testCaseName
     *   A fully-qualified path representing TestCase resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTestCaseName(testCaseName) {
        return this.pathTemplates.testCasePathTemplate.match(testCaseName).project;
    }
    /**
     * Parse the location from TestCase resource.
     *
     * @param {string} testCaseName
     *   A fully-qualified path representing TestCase resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTestCaseName(testCaseName) {
        return this.pathTemplates.testCasePathTemplate.match(testCaseName).location;
    }
    /**
     * Parse the agent from TestCase resource.
     *
     * @param {string} testCaseName
     *   A fully-qualified path representing TestCase resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromTestCaseName(testCaseName) {
        return this.pathTemplates.testCasePathTemplate.match(testCaseName).agent;
    }
    /**
     * Parse the test_case from TestCase resource.
     *
     * @param {string} testCaseName
     *   A fully-qualified path representing TestCase resource.
     * @returns {string} A string representing the test_case.
     */
    matchTestCaseFromTestCaseName(testCaseName) {
        return this.pathTemplates.testCasePathTemplate.match(testCaseName)
            .test_case;
    }
    /**
     * Return a fully-qualified testCaseResult resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} test_case
     * @param {string} result
     * @returns {string} Resource name string.
     */
    testCaseResultPath(project, location, agent, testCase, result) {
        return this.pathTemplates.testCaseResultPathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            test_case: testCase,
            result: result,
        });
    }
    /**
     * Parse the project from TestCaseResult resource.
     *
     * @param {string} testCaseResultName
     *   A fully-qualified path representing TestCaseResult resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTestCaseResultName(testCaseResultName) {
        return this.pathTemplates.testCaseResultPathTemplate.match(testCaseResultName).project;
    }
    /**
     * Parse the location from TestCaseResult resource.
     *
     * @param {string} testCaseResultName
     *   A fully-qualified path representing TestCaseResult resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTestCaseResultName(testCaseResultName) {
        return this.pathTemplates.testCaseResultPathTemplate.match(testCaseResultName).location;
    }
    /**
     * Parse the agent from TestCaseResult resource.
     *
     * @param {string} testCaseResultName
     *   A fully-qualified path representing TestCaseResult resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromTestCaseResultName(testCaseResultName) {
        return this.pathTemplates.testCaseResultPathTemplate.match(testCaseResultName).agent;
    }
    /**
     * Parse the test_case from TestCaseResult resource.
     *
     * @param {string} testCaseResultName
     *   A fully-qualified path representing TestCaseResult resource.
     * @returns {string} A string representing the test_case.
     */
    matchTestCaseFromTestCaseResultName(testCaseResultName) {
        return this.pathTemplates.testCaseResultPathTemplate.match(testCaseResultName).test_case;
    }
    /**
     * Parse the result from TestCaseResult resource.
     *
     * @param {string} testCaseResultName
     *   A fully-qualified path representing TestCaseResult resource.
     * @returns {string} A string representing the result.
     */
    matchResultFromTestCaseResultName(testCaseResultName) {
        return this.pathTemplates.testCaseResultPathTemplate.match(testCaseResultName).result;
    }
    /**
     * Return a fully-qualified transitionRouteGroup resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} flow
     * @param {string} transition_route_group
     * @returns {string} Resource name string.
     */
    transitionRouteGroupPath(project, location, agent, flow, transitionRouteGroup) {
        return this.pathTemplates.transitionRouteGroupPathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            flow: flow,
            transition_route_group: transitionRouteGroup,
        });
    }
    /**
     * Parse the project from TransitionRouteGroup resource.
     *
     * @param {string} transitionRouteGroupName
     *   A fully-qualified path representing TransitionRouteGroup resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTransitionRouteGroupName(transitionRouteGroupName) {
        return this.pathTemplates.transitionRouteGroupPathTemplate.match(transitionRouteGroupName).project;
    }
    /**
     * Parse the location from TransitionRouteGroup resource.
     *
     * @param {string} transitionRouteGroupName
     *   A fully-qualified path representing TransitionRouteGroup resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTransitionRouteGroupName(transitionRouteGroupName) {
        return this.pathTemplates.transitionRouteGroupPathTemplate.match(transitionRouteGroupName).location;
    }
    /**
     * Parse the agent from TransitionRouteGroup resource.
     *
     * @param {string} transitionRouteGroupName
     *   A fully-qualified path representing TransitionRouteGroup resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromTransitionRouteGroupName(transitionRouteGroupName) {
        return this.pathTemplates.transitionRouteGroupPathTemplate.match(transitionRouteGroupName).agent;
    }
    /**
     * Parse the flow from TransitionRouteGroup resource.
     *
     * @param {string} transitionRouteGroupName
     *   A fully-qualified path representing TransitionRouteGroup resource.
     * @returns {string} A string representing the flow.
     */
    matchFlowFromTransitionRouteGroupName(transitionRouteGroupName) {
        return this.pathTemplates.transitionRouteGroupPathTemplate.match(transitionRouteGroupName).flow;
    }
    /**
     * Parse the transition_route_group from TransitionRouteGroup resource.
     *
     * @param {string} transitionRouteGroupName
     *   A fully-qualified path representing TransitionRouteGroup resource.
     * @returns {string} A string representing the transition_route_group.
     */
    matchTransitionRouteGroupFromTransitionRouteGroupName(transitionRouteGroupName) {
        return this.pathTemplates.transitionRouteGroupPathTemplate.match(transitionRouteGroupName).transition_route_group;
    }
    /**
     * Return a fully-qualified version resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} flow
     * @param {string} version
     * @returns {string} Resource name string.
     */
    versionPath(project, location, agent, flow, version) {
        return this.pathTemplates.versionPathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            flow: flow,
            version: version,
        });
    }
    /**
     * Parse the project from Version resource.
     *
     * @param {string} versionName
     *   A fully-qualified path representing Version resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromVersionName(versionName) {
        return this.pathTemplates.versionPathTemplate.match(versionName).project;
    }
    /**
     * Parse the location from Version resource.
     *
     * @param {string} versionName
     *   A fully-qualified path representing Version resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromVersionName(versionName) {
        return this.pathTemplates.versionPathTemplate.match(versionName).location;
    }
    /**
     * Parse the agent from Version resource.
     *
     * @param {string} versionName
     *   A fully-qualified path representing Version resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromVersionName(versionName) {
        return this.pathTemplates.versionPathTemplate.match(versionName).agent;
    }
    /**
     * Parse the flow from Version resource.
     *
     * @param {string} versionName
     *   A fully-qualified path representing Version resource.
     * @returns {string} A string representing the flow.
     */
    matchFlowFromVersionName(versionName) {
        return this.pathTemplates.versionPathTemplate.match(versionName).flow;
    }
    /**
     * Parse the version from Version resource.
     *
     * @param {string} versionName
     *   A fully-qualified path representing Version resource.
     * @returns {string} A string representing the version.
     */
    matchVersionFromVersionName(versionName) {
        return this.pathTemplates.versionPathTemplate.match(versionName).version;
    }
    /**
     * Return a fully-qualified webhook resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} webhook
     * @returns {string} Resource name string.
     */
    webhookPath(project, location, agent, webhook) {
        return this.pathTemplates.webhookPathTemplate.render({
            project: project,
            location: location,
            agent: agent,
            webhook: webhook,
        });
    }
    /**
     * Parse the project from Webhook resource.
     *
     * @param {string} webhookName
     *   A fully-qualified path representing Webhook resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromWebhookName(webhookName) {
        return this.pathTemplates.webhookPathTemplate.match(webhookName).project;
    }
    /**
     * Parse the location from Webhook resource.
     *
     * @param {string} webhookName
     *   A fully-qualified path representing Webhook resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromWebhookName(webhookName) {
        return this.pathTemplates.webhookPathTemplate.match(webhookName).location;
    }
    /**
     * Parse the agent from Webhook resource.
     *
     * @param {string} webhookName
     *   A fully-qualified path representing Webhook resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromWebhookName(webhookName) {
        return this.pathTemplates.webhookPathTemplate.match(webhookName).agent;
    }
    /**
     * Parse the webhook from Webhook resource.
     *
     * @param {string} webhookName
     *   A fully-qualified path representing Webhook resource.
     * @returns {string} A string representing the webhook.
     */
    matchWebhookFromWebhookName(webhookName) {
        return this.pathTemplates.webhookPathTemplate.match(webhookName).webhook;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.flowsStub && !this._terminated) {
            return this.flowsStub.then(stub => {
                this._terminated = true;
                stub.close();
                this.locationsClient.close();
                this.operationsClient.close();
            });
        }
        return Promise.resolve();
    }
}
exports.FlowsClient = FlowsClient;
//# sourceMappingURL=flows_client.js.map