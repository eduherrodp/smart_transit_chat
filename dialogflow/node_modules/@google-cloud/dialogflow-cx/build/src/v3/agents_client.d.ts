/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback, LocationsClient, LocationProtos } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Service for managing {@link google.cloud.dialogflow.cx.v3.Agent|Agents}.
 * @class
 * @memberof v3
 */
export declare class AgentsClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    locationsClient: LocationsClient;
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    agentsStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of AgentsClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
     *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new AgentsClient({fallback: 'rest'}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Retrieves the specified agent.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the agent.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.dialogflow.cx.v3.Agent | Agent}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/agents.get_agent.js</caption>
     * region_tag:dialogflow_v3_generated_Agents_GetAgent_async
     */
    getAgent(request?: protos.google.cloud.dialogflow.cx.v3.IGetAgentRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dialogflow.cx.v3.IAgent,
        protos.google.cloud.dialogflow.cx.v3.IGetAgentRequest | undefined,
        {} | undefined
    ]>;
    getAgent(request: protos.google.cloud.dialogflow.cx.v3.IGetAgentRequest, options: CallOptions, callback: Callback<protos.google.cloud.dialogflow.cx.v3.IAgent, protos.google.cloud.dialogflow.cx.v3.IGetAgentRequest | null | undefined, {} | null | undefined>): void;
    getAgent(request: protos.google.cloud.dialogflow.cx.v3.IGetAgentRequest, callback: Callback<protos.google.cloud.dialogflow.cx.v3.IAgent, protos.google.cloud.dialogflow.cx.v3.IGetAgentRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates an agent in the specified location.
     *
     * Note: You should always train flows prior to sending them queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The location to create a agent for.
     *   Format: `projects/<Project ID>/locations/<Location ID>`.
     * @param {google.cloud.dialogflow.cx.v3.Agent} request.agent
     *   Required. The agent to create.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.dialogflow.cx.v3.Agent | Agent}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/agents.create_agent.js</caption>
     * region_tag:dialogflow_v3_generated_Agents_CreateAgent_async
     */
    createAgent(request?: protos.google.cloud.dialogflow.cx.v3.ICreateAgentRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dialogflow.cx.v3.IAgent,
        protos.google.cloud.dialogflow.cx.v3.ICreateAgentRequest | undefined,
        {} | undefined
    ]>;
    createAgent(request: protos.google.cloud.dialogflow.cx.v3.ICreateAgentRequest, options: CallOptions, callback: Callback<protos.google.cloud.dialogflow.cx.v3.IAgent, protos.google.cloud.dialogflow.cx.v3.ICreateAgentRequest | null | undefined, {} | null | undefined>): void;
    createAgent(request: protos.google.cloud.dialogflow.cx.v3.ICreateAgentRequest, callback: Callback<protos.google.cloud.dialogflow.cx.v3.IAgent, protos.google.cloud.dialogflow.cx.v3.ICreateAgentRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Updates the specified agent.
     *
     * Note: You should always train flows prior to sending them queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.dialogflow.cx.v3.Agent} request.agent
     *   Required. The agent to update.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   The mask to control which fields get updated. If the mask is not present,
     *   all fields will be updated.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.dialogflow.cx.v3.Agent | Agent}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/agents.update_agent.js</caption>
     * region_tag:dialogflow_v3_generated_Agents_UpdateAgent_async
     */
    updateAgent(request?: protos.google.cloud.dialogflow.cx.v3.IUpdateAgentRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dialogflow.cx.v3.IAgent,
        protos.google.cloud.dialogflow.cx.v3.IUpdateAgentRequest | undefined,
        {} | undefined
    ]>;
    updateAgent(request: protos.google.cloud.dialogflow.cx.v3.IUpdateAgentRequest, options: CallOptions, callback: Callback<protos.google.cloud.dialogflow.cx.v3.IAgent, protos.google.cloud.dialogflow.cx.v3.IUpdateAgentRequest | null | undefined, {} | null | undefined>): void;
    updateAgent(request: protos.google.cloud.dialogflow.cx.v3.IUpdateAgentRequest, callback: Callback<protos.google.cloud.dialogflow.cx.v3.IAgent, protos.google.cloud.dialogflow.cx.v3.IUpdateAgentRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Deletes the specified agent.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the agent to delete.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.protobuf.Empty | Empty}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/agents.delete_agent.js</caption>
     * region_tag:dialogflow_v3_generated_Agents_DeleteAgent_async
     */
    deleteAgent(request?: protos.google.cloud.dialogflow.cx.v3.IDeleteAgentRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dialogflow.cx.v3.IDeleteAgentRequest | undefined,
        {} | undefined
    ]>;
    deleteAgent(request: protos.google.cloud.dialogflow.cx.v3.IDeleteAgentRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.dialogflow.cx.v3.IDeleteAgentRequest | null | undefined, {} | null | undefined>): void;
    deleteAgent(request: protos.google.cloud.dialogflow.cx.v3.IDeleteAgentRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.dialogflow.cx.v3.IDeleteAgentRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Validates the specified agent and creates or updates validation results.
     * The agent in draft version is validated. Please call this API after the
     * training is completed to get the complete validation results.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The agent to validate.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
     * @param {string} request.languageCode
     *   If not specified, the agent's default language is used.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.dialogflow.cx.v3.AgentValidationResult | AgentValidationResult}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/agents.validate_agent.js</caption>
     * region_tag:dialogflow_v3_generated_Agents_ValidateAgent_async
     */
    validateAgent(request?: protos.google.cloud.dialogflow.cx.v3.IValidateAgentRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dialogflow.cx.v3.IAgentValidationResult,
        protos.google.cloud.dialogflow.cx.v3.IValidateAgentRequest | undefined,
        {} | undefined
    ]>;
    validateAgent(request: protos.google.cloud.dialogflow.cx.v3.IValidateAgentRequest, options: CallOptions, callback: Callback<protos.google.cloud.dialogflow.cx.v3.IAgentValidationResult, protos.google.cloud.dialogflow.cx.v3.IValidateAgentRequest | null | undefined, {} | null | undefined>): void;
    validateAgent(request: protos.google.cloud.dialogflow.cx.v3.IValidateAgentRequest, callback: Callback<protos.google.cloud.dialogflow.cx.v3.IAgentValidationResult, protos.google.cloud.dialogflow.cx.v3.IValidateAgentRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets the latest agent validation result. Agent validation is performed
     * when ValidateAgent is called.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The agent name.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
     *   ID>/validationResult`.
     * @param {string} request.languageCode
     *   If not specified, the agent's default language is used.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.dialogflow.cx.v3.AgentValidationResult | AgentValidationResult}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/agents.get_agent_validation_result.js</caption>
     * region_tag:dialogflow_v3_generated_Agents_GetAgentValidationResult_async
     */
    getAgentValidationResult(request?: protos.google.cloud.dialogflow.cx.v3.IGetAgentValidationResultRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dialogflow.cx.v3.IAgentValidationResult,
        (protos.google.cloud.dialogflow.cx.v3.IGetAgentValidationResultRequest | undefined),
        {} | undefined
    ]>;
    getAgentValidationResult(request: protos.google.cloud.dialogflow.cx.v3.IGetAgentValidationResultRequest, options: CallOptions, callback: Callback<protos.google.cloud.dialogflow.cx.v3.IAgentValidationResult, protos.google.cloud.dialogflow.cx.v3.IGetAgentValidationResultRequest | null | undefined, {} | null | undefined>): void;
    getAgentValidationResult(request: protos.google.cloud.dialogflow.cx.v3.IGetAgentValidationResultRequest, callback: Callback<protos.google.cloud.dialogflow.cx.v3.IAgentValidationResult, protos.google.cloud.dialogflow.cx.v3.IGetAgentValidationResultRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Exports the specified agent to a binary file.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`: An empty [Struct
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
     * - `response`:
     * {@link google.cloud.dialogflow.cx.v3.ExportAgentResponse|ExportAgentResponse}
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the agent to export.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
     * @param {string} [request.agentUri]
     *   Optional. The [Google Cloud
     *   Storage](https://cloud.google.com/storage/docs/) URI to export the agent
     *   to. The format of this URI must be `gs://<bucket-name>/<object-name>`. If
     *   left unspecified, the serialized agent is returned inline.
     *
     *   Dialogflow performs a write operation for the Cloud Storage object
     *   on the caller's behalf, so your request authentication must
     *   have write permissions for the object. For more information, see
     *   [Dialogflow access
     *   control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
     * @param {google.cloud.dialogflow.cx.v3.ExportAgentRequest.DataFormat} [request.dataFormat]
     *   Optional. The data format of the exported agent. If not specified, `BLOB`
     *   is assumed.
     * @param {string} [request.environment]
     *   Optional. Environment name. If not set, draft environment is assumed.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
     *   ID>/environments/<Environment ID>`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/agents.export_agent.js</caption>
     * region_tag:dialogflow_v3_generated_Agents_ExportAgent_async
     */
    exportAgent(request?: protos.google.cloud.dialogflow.cx.v3.IExportAgentRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.dialogflow.cx.v3.IExportAgentResponse, protos.google.protobuf.IStruct>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    exportAgent(request: protos.google.cloud.dialogflow.cx.v3.IExportAgentRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.dialogflow.cx.v3.IExportAgentResponse, protos.google.protobuf.IStruct>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    exportAgent(request: protos.google.cloud.dialogflow.cx.v3.IExportAgentRequest, callback: Callback<LROperation<protos.google.cloud.dialogflow.cx.v3.IExportAgentResponse, protos.google.protobuf.IStruct>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `exportAgent()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/agents.export_agent.js</caption>
     * region_tag:dialogflow_v3_generated_Agents_ExportAgent_async
     */
    checkExportAgentProgress(name: string): Promise<LROperation<protos.google.cloud.dialogflow.cx.v3.ExportAgentResponse, protos.google.protobuf.Struct>>;
    /**
     * Restores the specified agent from a binary file.
     *
     * Replaces the current agent with a new one. Note that all existing resources
     * in agent (e.g. intents, entity types, flows) will be removed.
     *
     * This method is a [long-running
     * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
     * The returned `Operation` type has the following method-specific fields:
     *
     * - `metadata`: An empty [Struct
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
     * - `response`: An [Empty
     *   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
     *
     * Note: You should always train flows prior to sending them queries. See the
     * [training
     * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the agent to restore into.
     *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
     * @param {string} request.agentUri
     *   The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI
     *   to restore agent from. The format of this URI must be
     *   `gs://<bucket-name>/<object-name>`.
     *
     *   Dialogflow performs a read operation for the Cloud Storage object
     *   on the caller's behalf, so your request authentication must
     *   have read permissions for the object. For more information, see
     *   [Dialogflow access
     *   control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
     * @param {Buffer} request.agentContent
     *   Uncompressed raw byte content for agent.
     * @param {google.cloud.dialogflow.cx.v3.RestoreAgentRequest.RestoreOption} request.restoreOption
     *   Agent restore mode. If not specified, `KEEP` is assumed.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/agents.restore_agent.js</caption>
     * region_tag:dialogflow_v3_generated_Agents_RestoreAgent_async
     */
    restoreAgent(request?: protos.google.cloud.dialogflow.cx.v3.IRestoreAgentRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.protobuf.IStruct>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    restoreAgent(request: protos.google.cloud.dialogflow.cx.v3.IRestoreAgentRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.protobuf.IStruct>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    restoreAgent(request: protos.google.cloud.dialogflow.cx.v3.IRestoreAgentRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.protobuf.IStruct>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `restoreAgent()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/agents.restore_agent.js</caption>
     * region_tag:dialogflow_v3_generated_Agents_RestoreAgent_async
     */
    checkRestoreAgentProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.protobuf.Struct>>;
    /**
     * Returns the list of all agents in the specified location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The location to list all agents for.
     *   Format: `projects/<Project ID>/locations/<Location ID>`.
     * @param {number} request.pageSize
     *   The maximum number of items to return in a single page. By default 100 and
     *   at most 1000.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link google.cloud.dialogflow.cx.v3.Agent | Agent}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listAgentsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listAgents(request?: protos.google.cloud.dialogflow.cx.v3.IListAgentsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.dialogflow.cx.v3.IAgent[],
        protos.google.cloud.dialogflow.cx.v3.IListAgentsRequest | null,
        protos.google.cloud.dialogflow.cx.v3.IListAgentsResponse
    ]>;
    listAgents(request: protos.google.cloud.dialogflow.cx.v3.IListAgentsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.dialogflow.cx.v3.IListAgentsRequest, protos.google.cloud.dialogflow.cx.v3.IListAgentsResponse | null | undefined, protos.google.cloud.dialogflow.cx.v3.IAgent>): void;
    listAgents(request: protos.google.cloud.dialogflow.cx.v3.IListAgentsRequest, callback: PaginationCallback<protos.google.cloud.dialogflow.cx.v3.IListAgentsRequest, protos.google.cloud.dialogflow.cx.v3.IListAgentsResponse | null | undefined, protos.google.cloud.dialogflow.cx.v3.IAgent>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The location to list all agents for.
     *   Format: `projects/<Project ID>/locations/<Location ID>`.
     * @param {number} request.pageSize
     *   The maximum number of items to return in a single page. By default 100 and
     *   at most 1000.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link google.cloud.dialogflow.cx.v3.Agent | Agent} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listAgentsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listAgentsStream(request?: protos.google.cloud.dialogflow.cx.v3.IListAgentsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listAgents`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The location to list all agents for.
     *   Format: `projects/<Project ID>/locations/<Location ID>`.
     * @param {number} request.pageSize
     *   The maximum number of items to return in a single page. By default 100 and
     *   at most 1000.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.dialogflow.cx.v3.Agent | Agent}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v3/agents.list_agents.js</caption>
     * region_tag:dialogflow_v3_generated_Agents_ListAgents_async
     */
    listAgentsAsync(request?: protos.google.cloud.dialogflow.cx.v3.IListAgentsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.dialogflow.cx.v3.IAgent>;
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request: LocationProtos.google.cloud.location.IGetLocationRequest, options?: gax.CallOptions | Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>, callback?: Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>): Promise<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request: LocationProtos.google.cloud.location.IListLocationsRequest, options?: CallOptions): AsyncIterable<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request: protos.google.longrunning.GetOperationRequest, options?: gax.CallOptions | Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>): Promise<[protos.google.longrunning.Operation]>;
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request: protos.google.longrunning.ListOperationsRequest, options?: gax.CallOptions): AsyncIterable<protos.google.longrunning.ListOperationsResponse>;
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request: protos.google.longrunning.CancelOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.CancelOperationRequest, {} | undefined | null>, callback?: Callback<protos.google.longrunning.CancelOperationRequest, protos.google.protobuf.Empty, {} | undefined | null>): Promise<protos.google.protobuf.Empty>;
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request: protos.google.longrunning.DeleteOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>): Promise<protos.google.protobuf.Empty>;
    /**
     * Return a fully-qualified agent resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @returns {string} Resource name string.
     */
    agentPath(project: string, location: string, agent: string): string;
    /**
     * Parse the project from Agent resource.
     *
     * @param {string} agentName
     *   A fully-qualified path representing Agent resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAgentName(agentName: string): string | number;
    /**
     * Parse the location from Agent resource.
     *
     * @param {string} agentName
     *   A fully-qualified path representing Agent resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromAgentName(agentName: string): string | number;
    /**
     * Parse the agent from Agent resource.
     *
     * @param {string} agentName
     *   A fully-qualified path representing Agent resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromAgentName(agentName: string): string | number;
    /**
     * Return a fully-qualified agentValidationResult resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @returns {string} Resource name string.
     */
    agentValidationResultPath(project: string, location: string, agent: string): string;
    /**
     * Parse the project from AgentValidationResult resource.
     *
     * @param {string} agentValidationResultName
     *   A fully-qualified path representing AgentValidationResult resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAgentValidationResultName(agentValidationResultName: string): string | number;
    /**
     * Parse the location from AgentValidationResult resource.
     *
     * @param {string} agentValidationResultName
     *   A fully-qualified path representing AgentValidationResult resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromAgentValidationResultName(agentValidationResultName: string): string | number;
    /**
     * Parse the agent from AgentValidationResult resource.
     *
     * @param {string} agentValidationResultName
     *   A fully-qualified path representing AgentValidationResult resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromAgentValidationResultName(agentValidationResultName: string): string | number;
    /**
     * Return a fully-qualified changelog resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} changelog
     * @returns {string} Resource name string.
     */
    changelogPath(project: string, location: string, agent: string, changelog: string): string;
    /**
     * Parse the project from Changelog resource.
     *
     * @param {string} changelogName
     *   A fully-qualified path representing Changelog resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromChangelogName(changelogName: string): string | number;
    /**
     * Parse the location from Changelog resource.
     *
     * @param {string} changelogName
     *   A fully-qualified path representing Changelog resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromChangelogName(changelogName: string): string | number;
    /**
     * Parse the agent from Changelog resource.
     *
     * @param {string} changelogName
     *   A fully-qualified path representing Changelog resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromChangelogName(changelogName: string): string | number;
    /**
     * Parse the changelog from Changelog resource.
     *
     * @param {string} changelogName
     *   A fully-qualified path representing Changelog resource.
     * @returns {string} A string representing the changelog.
     */
    matchChangelogFromChangelogName(changelogName: string): string | number;
    /**
     * Return a fully-qualified continuousTestResult resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} environment
     * @param {string} continuous_test_result
     * @returns {string} Resource name string.
     */
    continuousTestResultPath(project: string, location: string, agent: string, environment: string, continuousTestResult: string): string;
    /**
     * Parse the project from ContinuousTestResult resource.
     *
     * @param {string} continuousTestResultName
     *   A fully-qualified path representing ContinuousTestResult resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromContinuousTestResultName(continuousTestResultName: string): string | number;
    /**
     * Parse the location from ContinuousTestResult resource.
     *
     * @param {string} continuousTestResultName
     *   A fully-qualified path representing ContinuousTestResult resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromContinuousTestResultName(continuousTestResultName: string): string | number;
    /**
     * Parse the agent from ContinuousTestResult resource.
     *
     * @param {string} continuousTestResultName
     *   A fully-qualified path representing ContinuousTestResult resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromContinuousTestResultName(continuousTestResultName: string): string | number;
    /**
     * Parse the environment from ContinuousTestResult resource.
     *
     * @param {string} continuousTestResultName
     *   A fully-qualified path representing ContinuousTestResult resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromContinuousTestResultName(continuousTestResultName: string): string | number;
    /**
     * Parse the continuous_test_result from ContinuousTestResult resource.
     *
     * @param {string} continuousTestResultName
     *   A fully-qualified path representing ContinuousTestResult resource.
     * @returns {string} A string representing the continuous_test_result.
     */
    matchContinuousTestResultFromContinuousTestResultName(continuousTestResultName: string): string | number;
    /**
     * Return a fully-qualified deployment resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} environment
     * @param {string} deployment
     * @returns {string} Resource name string.
     */
    deploymentPath(project: string, location: string, agent: string, environment: string, deployment: string): string;
    /**
     * Parse the project from Deployment resource.
     *
     * @param {string} deploymentName
     *   A fully-qualified path representing Deployment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDeploymentName(deploymentName: string): string | number;
    /**
     * Parse the location from Deployment resource.
     *
     * @param {string} deploymentName
     *   A fully-qualified path representing Deployment resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDeploymentName(deploymentName: string): string | number;
    /**
     * Parse the agent from Deployment resource.
     *
     * @param {string} deploymentName
     *   A fully-qualified path representing Deployment resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromDeploymentName(deploymentName: string): string | number;
    /**
     * Parse the environment from Deployment resource.
     *
     * @param {string} deploymentName
     *   A fully-qualified path representing Deployment resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromDeploymentName(deploymentName: string): string | number;
    /**
     * Parse the deployment from Deployment resource.
     *
     * @param {string} deploymentName
     *   A fully-qualified path representing Deployment resource.
     * @returns {string} A string representing the deployment.
     */
    matchDeploymentFromDeploymentName(deploymentName: string): string | number;
    /**
     * Return a fully-qualified entityType resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} entity_type
     * @returns {string} Resource name string.
     */
    entityTypePath(project: string, location: string, agent: string, entityType: string): string;
    /**
     * Parse the project from EntityType resource.
     *
     * @param {string} entityTypeName
     *   A fully-qualified path representing EntityType resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEntityTypeName(entityTypeName: string): string | number;
    /**
     * Parse the location from EntityType resource.
     *
     * @param {string} entityTypeName
     *   A fully-qualified path representing EntityType resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEntityTypeName(entityTypeName: string): string | number;
    /**
     * Parse the agent from EntityType resource.
     *
     * @param {string} entityTypeName
     *   A fully-qualified path representing EntityType resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromEntityTypeName(entityTypeName: string): string | number;
    /**
     * Parse the entity_type from EntityType resource.
     *
     * @param {string} entityTypeName
     *   A fully-qualified path representing EntityType resource.
     * @returns {string} A string representing the entity_type.
     */
    matchEntityTypeFromEntityTypeName(entityTypeName: string): string | number;
    /**
     * Return a fully-qualified environment resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} environment
     * @returns {string} Resource name string.
     */
    environmentPath(project: string, location: string, agent: string, environment: string): string;
    /**
     * Parse the project from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEnvironmentName(environmentName: string): string | number;
    /**
     * Parse the location from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEnvironmentName(environmentName: string): string | number;
    /**
     * Parse the agent from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromEnvironmentName(environmentName: string): string | number;
    /**
     * Parse the environment from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromEnvironmentName(environmentName: string): string | number;
    /**
     * Return a fully-qualified experiment resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} environment
     * @param {string} experiment
     * @returns {string} Resource name string.
     */
    experimentPath(project: string, location: string, agent: string, environment: string, experiment: string): string;
    /**
     * Parse the project from Experiment resource.
     *
     * @param {string} experimentName
     *   A fully-qualified path representing Experiment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromExperimentName(experimentName: string): string | number;
    /**
     * Parse the location from Experiment resource.
     *
     * @param {string} experimentName
     *   A fully-qualified path representing Experiment resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromExperimentName(experimentName: string): string | number;
    /**
     * Parse the agent from Experiment resource.
     *
     * @param {string} experimentName
     *   A fully-qualified path representing Experiment resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromExperimentName(experimentName: string): string | number;
    /**
     * Parse the environment from Experiment resource.
     *
     * @param {string} experimentName
     *   A fully-qualified path representing Experiment resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromExperimentName(experimentName: string): string | number;
    /**
     * Parse the experiment from Experiment resource.
     *
     * @param {string} experimentName
     *   A fully-qualified path representing Experiment resource.
     * @returns {string} A string representing the experiment.
     */
    matchExperimentFromExperimentName(experimentName: string): string | number;
    /**
     * Return a fully-qualified flow resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} flow
     * @returns {string} Resource name string.
     */
    flowPath(project: string, location: string, agent: string, flow: string): string;
    /**
     * Parse the project from Flow resource.
     *
     * @param {string} flowName
     *   A fully-qualified path representing Flow resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromFlowName(flowName: string): string | number;
    /**
     * Parse the location from Flow resource.
     *
     * @param {string} flowName
     *   A fully-qualified path representing Flow resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromFlowName(flowName: string): string | number;
    /**
     * Parse the agent from Flow resource.
     *
     * @param {string} flowName
     *   A fully-qualified path representing Flow resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromFlowName(flowName: string): string | number;
    /**
     * Parse the flow from Flow resource.
     *
     * @param {string} flowName
     *   A fully-qualified path representing Flow resource.
     * @returns {string} A string representing the flow.
     */
    matchFlowFromFlowName(flowName: string): string | number;
    /**
     * Return a fully-qualified flowValidationResult resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} flow
     * @returns {string} Resource name string.
     */
    flowValidationResultPath(project: string, location: string, agent: string, flow: string): string;
    /**
     * Parse the project from FlowValidationResult resource.
     *
     * @param {string} flowValidationResultName
     *   A fully-qualified path representing FlowValidationResult resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromFlowValidationResultName(flowValidationResultName: string): string | number;
    /**
     * Parse the location from FlowValidationResult resource.
     *
     * @param {string} flowValidationResultName
     *   A fully-qualified path representing FlowValidationResult resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromFlowValidationResultName(flowValidationResultName: string): string | number;
    /**
     * Parse the agent from FlowValidationResult resource.
     *
     * @param {string} flowValidationResultName
     *   A fully-qualified path representing FlowValidationResult resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromFlowValidationResultName(flowValidationResultName: string): string | number;
    /**
     * Parse the flow from FlowValidationResult resource.
     *
     * @param {string} flowValidationResultName
     *   A fully-qualified path representing FlowValidationResult resource.
     * @returns {string} A string representing the flow.
     */
    matchFlowFromFlowValidationResultName(flowValidationResultName: string): string | number;
    /**
     * Return a fully-qualified intent resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} intent
     * @returns {string} Resource name string.
     */
    intentPath(project: string, location: string, agent: string, intent: string): string;
    /**
     * Parse the project from Intent resource.
     *
     * @param {string} intentName
     *   A fully-qualified path representing Intent resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromIntentName(intentName: string): string | number;
    /**
     * Parse the location from Intent resource.
     *
     * @param {string} intentName
     *   A fully-qualified path representing Intent resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromIntentName(intentName: string): string | number;
    /**
     * Parse the agent from Intent resource.
     *
     * @param {string} intentName
     *   A fully-qualified path representing Intent resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromIntentName(intentName: string): string | number;
    /**
     * Parse the intent from Intent resource.
     *
     * @param {string} intentName
     *   A fully-qualified path representing Intent resource.
     * @returns {string} A string representing the intent.
     */
    matchIntentFromIntentName(intentName: string): string | number;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified page resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} flow
     * @param {string} page
     * @returns {string} Resource name string.
     */
    pagePath(project: string, location: string, agent: string, flow: string, page: string): string;
    /**
     * Parse the project from Page resource.
     *
     * @param {string} pageName
     *   A fully-qualified path representing Page resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromPageName(pageName: string): string | number;
    /**
     * Parse the location from Page resource.
     *
     * @param {string} pageName
     *   A fully-qualified path representing Page resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromPageName(pageName: string): string | number;
    /**
     * Parse the agent from Page resource.
     *
     * @param {string} pageName
     *   A fully-qualified path representing Page resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromPageName(pageName: string): string | number;
    /**
     * Parse the flow from Page resource.
     *
     * @param {string} pageName
     *   A fully-qualified path representing Page resource.
     * @returns {string} A string representing the flow.
     */
    matchFlowFromPageName(pageName: string): string | number;
    /**
     * Parse the page from Page resource.
     *
     * @param {string} pageName
     *   A fully-qualified path representing Page resource.
     * @returns {string} A string representing the page.
     */
    matchPageFromPageName(pageName: string): string | number;
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project: string): string;
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName: string): string | number;
    /**
     * Return a fully-qualified projectLocationAgentEnvironmentSessionEntityType resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} environment
     * @param {string} session
     * @param {string} entity_type
     * @returns {string} Resource name string.
     */
    projectLocationAgentEnvironmentSessionEntityTypePath(project: string, location: string, agent: string, environment: string, session: string, entityType: string): string;
    /**
     * Parse the project from ProjectLocationAgentEnvironmentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationAgentEnvironmentSessionEntityTypeName(projectLocationAgentEnvironmentSessionEntityTypeName: string): string | number;
    /**
     * Parse the location from ProjectLocationAgentEnvironmentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationAgentEnvironmentSessionEntityTypeName(projectLocationAgentEnvironmentSessionEntityTypeName: string): string | number;
    /**
     * Parse the agent from ProjectLocationAgentEnvironmentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromProjectLocationAgentEnvironmentSessionEntityTypeName(projectLocationAgentEnvironmentSessionEntityTypeName: string): string | number;
    /**
     * Parse the environment from ProjectLocationAgentEnvironmentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromProjectLocationAgentEnvironmentSessionEntityTypeName(projectLocationAgentEnvironmentSessionEntityTypeName: string): string | number;
    /**
     * Parse the session from ProjectLocationAgentEnvironmentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromProjectLocationAgentEnvironmentSessionEntityTypeName(projectLocationAgentEnvironmentSessionEntityTypeName: string): string | number;
    /**
     * Parse the entity_type from ProjectLocationAgentEnvironmentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
     * @returns {string} A string representing the entity_type.
     */
    matchEntityTypeFromProjectLocationAgentEnvironmentSessionEntityTypeName(projectLocationAgentEnvironmentSessionEntityTypeName: string): string | number;
    /**
     * Return a fully-qualified projectLocationAgentSessionEntityType resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} session
     * @param {string} entity_type
     * @returns {string} Resource name string.
     */
    projectLocationAgentSessionEntityTypePath(project: string, location: string, agent: string, session: string, entityType: string): string;
    /**
     * Parse the project from ProjectLocationAgentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_session_entity_type resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName: string): string | number;
    /**
     * Parse the location from ProjectLocationAgentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_session_entity_type resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName: string): string | number;
    /**
     * Parse the agent from ProjectLocationAgentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_session_entity_type resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName: string): string | number;
    /**
     * Parse the session from ProjectLocationAgentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_session_entity_type resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName: string): string | number;
    /**
     * Parse the entity_type from ProjectLocationAgentSessionEntityType resource.
     *
     * @param {string} projectLocationAgentSessionEntityTypeName
     *   A fully-qualified path representing project_location_agent_session_entity_type resource.
     * @returns {string} A string representing the entity_type.
     */
    matchEntityTypeFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName: string): string | number;
    /**
     * Return a fully-qualified securitySettings resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} security_settings
     * @returns {string} Resource name string.
     */
    securitySettingsPath(project: string, location: string, securitySettings: string): string;
    /**
     * Parse the project from SecuritySettings resource.
     *
     * @param {string} securitySettingsName
     *   A fully-qualified path representing SecuritySettings resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromSecuritySettingsName(securitySettingsName: string): string | number;
    /**
     * Parse the location from SecuritySettings resource.
     *
     * @param {string} securitySettingsName
     *   A fully-qualified path representing SecuritySettings resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromSecuritySettingsName(securitySettingsName: string): string | number;
    /**
     * Parse the security_settings from SecuritySettings resource.
     *
     * @param {string} securitySettingsName
     *   A fully-qualified path representing SecuritySettings resource.
     * @returns {string} A string representing the security_settings.
     */
    matchSecuritySettingsFromSecuritySettingsName(securitySettingsName: string): string | number;
    /**
     * Return a fully-qualified testCase resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} test_case
     * @returns {string} Resource name string.
     */
    testCasePath(project: string, location: string, agent: string, testCase: string): string;
    /**
     * Parse the project from TestCase resource.
     *
     * @param {string} testCaseName
     *   A fully-qualified path representing TestCase resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTestCaseName(testCaseName: string): string | number;
    /**
     * Parse the location from TestCase resource.
     *
     * @param {string} testCaseName
     *   A fully-qualified path representing TestCase resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTestCaseName(testCaseName: string): string | number;
    /**
     * Parse the agent from TestCase resource.
     *
     * @param {string} testCaseName
     *   A fully-qualified path representing TestCase resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromTestCaseName(testCaseName: string): string | number;
    /**
     * Parse the test_case from TestCase resource.
     *
     * @param {string} testCaseName
     *   A fully-qualified path representing TestCase resource.
     * @returns {string} A string representing the test_case.
     */
    matchTestCaseFromTestCaseName(testCaseName: string): string | number;
    /**
     * Return a fully-qualified testCaseResult resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} test_case
     * @param {string} result
     * @returns {string} Resource name string.
     */
    testCaseResultPath(project: string, location: string, agent: string, testCase: string, result: string): string;
    /**
     * Parse the project from TestCaseResult resource.
     *
     * @param {string} testCaseResultName
     *   A fully-qualified path representing TestCaseResult resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTestCaseResultName(testCaseResultName: string): string | number;
    /**
     * Parse the location from TestCaseResult resource.
     *
     * @param {string} testCaseResultName
     *   A fully-qualified path representing TestCaseResult resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTestCaseResultName(testCaseResultName: string): string | number;
    /**
     * Parse the agent from TestCaseResult resource.
     *
     * @param {string} testCaseResultName
     *   A fully-qualified path representing TestCaseResult resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromTestCaseResultName(testCaseResultName: string): string | number;
    /**
     * Parse the test_case from TestCaseResult resource.
     *
     * @param {string} testCaseResultName
     *   A fully-qualified path representing TestCaseResult resource.
     * @returns {string} A string representing the test_case.
     */
    matchTestCaseFromTestCaseResultName(testCaseResultName: string): string | number;
    /**
     * Parse the result from TestCaseResult resource.
     *
     * @param {string} testCaseResultName
     *   A fully-qualified path representing TestCaseResult resource.
     * @returns {string} A string representing the result.
     */
    matchResultFromTestCaseResultName(testCaseResultName: string): string | number;
    /**
     * Return a fully-qualified transitionRouteGroup resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} flow
     * @param {string} transition_route_group
     * @returns {string} Resource name string.
     */
    transitionRouteGroupPath(project: string, location: string, agent: string, flow: string, transitionRouteGroup: string): string;
    /**
     * Parse the project from TransitionRouteGroup resource.
     *
     * @param {string} transitionRouteGroupName
     *   A fully-qualified path representing TransitionRouteGroup resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTransitionRouteGroupName(transitionRouteGroupName: string): string | number;
    /**
     * Parse the location from TransitionRouteGroup resource.
     *
     * @param {string} transitionRouteGroupName
     *   A fully-qualified path representing TransitionRouteGroup resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTransitionRouteGroupName(transitionRouteGroupName: string): string | number;
    /**
     * Parse the agent from TransitionRouteGroup resource.
     *
     * @param {string} transitionRouteGroupName
     *   A fully-qualified path representing TransitionRouteGroup resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromTransitionRouteGroupName(transitionRouteGroupName: string): string | number;
    /**
     * Parse the flow from TransitionRouteGroup resource.
     *
     * @param {string} transitionRouteGroupName
     *   A fully-qualified path representing TransitionRouteGroup resource.
     * @returns {string} A string representing the flow.
     */
    matchFlowFromTransitionRouteGroupName(transitionRouteGroupName: string): string | number;
    /**
     * Parse the transition_route_group from TransitionRouteGroup resource.
     *
     * @param {string} transitionRouteGroupName
     *   A fully-qualified path representing TransitionRouteGroup resource.
     * @returns {string} A string representing the transition_route_group.
     */
    matchTransitionRouteGroupFromTransitionRouteGroupName(transitionRouteGroupName: string): string | number;
    /**
     * Return a fully-qualified version resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} flow
     * @param {string} version
     * @returns {string} Resource name string.
     */
    versionPath(project: string, location: string, agent: string, flow: string, version: string): string;
    /**
     * Parse the project from Version resource.
     *
     * @param {string} versionName
     *   A fully-qualified path representing Version resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromVersionName(versionName: string): string | number;
    /**
     * Parse the location from Version resource.
     *
     * @param {string} versionName
     *   A fully-qualified path representing Version resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromVersionName(versionName: string): string | number;
    /**
     * Parse the agent from Version resource.
     *
     * @param {string} versionName
     *   A fully-qualified path representing Version resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromVersionName(versionName: string): string | number;
    /**
     * Parse the flow from Version resource.
     *
     * @param {string} versionName
     *   A fully-qualified path representing Version resource.
     * @returns {string} A string representing the flow.
     */
    matchFlowFromVersionName(versionName: string): string | number;
    /**
     * Parse the version from Version resource.
     *
     * @param {string} versionName
     *   A fully-qualified path representing Version resource.
     * @returns {string} A string representing the version.
     */
    matchVersionFromVersionName(versionName: string): string | number;
    /**
     * Return a fully-qualified webhook resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} agent
     * @param {string} webhook
     * @returns {string} Resource name string.
     */
    webhookPath(project: string, location: string, agent: string, webhook: string): string;
    /**
     * Parse the project from Webhook resource.
     *
     * @param {string} webhookName
     *   A fully-qualified path representing Webhook resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromWebhookName(webhookName: string): string | number;
    /**
     * Parse the location from Webhook resource.
     *
     * @param {string} webhookName
     *   A fully-qualified path representing Webhook resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromWebhookName(webhookName: string): string | number;
    /**
     * Parse the agent from Webhook resource.
     *
     * @param {string} webhookName
     *   A fully-qualified path representing Webhook resource.
     * @returns {string} A string representing the agent.
     */
    matchAgentFromWebhookName(webhookName: string): string | number;
    /**
     * Parse the webhook from Webhook resource.
     *
     * @param {string} webhookName
     *   A fully-qualified path representing Webhook resource.
     * @returns {string} A string representing the webhook.
     */
    matchWebhookFromWebhookName(webhookName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
